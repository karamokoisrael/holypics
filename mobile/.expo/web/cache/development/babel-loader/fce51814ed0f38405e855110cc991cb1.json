{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.horizontalStackLayout = horizontalStackLayout;\nexports.useHorizontalStackLayout = useHorizontalStackLayout;\nexports.verticalStackLayout = verticalStackLayout;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar screen = _reactNative.Dimensions.get('window');\n\nfunction horizontalStackLayout() {\n  var modeConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _f = function _f(_value) {\n      var showLength = modeConfig.showLength,\n          _modeConfig$snapDirec = modeConfig.snapDirection,\n          snapDirection = _modeConfig$snapDirec === void 0 ? 'left' : _modeConfig$snapDirec,\n          _modeConfig$moveSize = modeConfig.moveSize,\n          moveSize = _modeConfig$moveSize === void 0 ? screen.width : _modeConfig$moveSize,\n          _modeConfig$stackInte = modeConfig.stackInterval,\n          stackInterval = _modeConfig$stackInte === void 0 ? 18 : _modeConfig$stackInte,\n          _modeConfig$scaleInte = modeConfig.scaleInterval,\n          scaleInterval = _modeConfig$scaleInte === void 0 ? 0.04 : _modeConfig$scaleInte,\n          _modeConfig$opacityIn = modeConfig.opacityInterval,\n          opacityInterval = _modeConfig$opacityIn === void 0 ? 0.1 : _modeConfig$opacityIn,\n          _modeConfig$rotateZDe = modeConfig.rotateZDeg,\n          rotateZDeg = _modeConfig$rotateZDe === void 0 ? 30 : _modeConfig$rotateZDe;\n      var transform = [];\n\n      var _getCommonVariables = getCommonVariables({\n        showLength: showLength,\n        value: _value,\n        snapDirection: snapDirection\n      }),\n          validLength = _getCommonVariables.validLength,\n          value = _getCommonVariables.value,\n          inputRange = _getCommonVariables.inputRange;\n\n      var _getCommonStyles = getCommonStyles({\n        validLength: validLength,\n        value: value,\n        opacityInterval: opacityInterval,\n        snapDirection: snapDirection\n      }),\n          zIndex = _getCommonStyles.zIndex,\n          opacity = _getCommonStyles.opacity;\n\n      var styles = {\n        transform: transform,\n        zIndex: zIndex,\n        opacity: opacity\n      };\n      var translateX;\n      var scale;\n      var rotateZ;\n\n      if (snapDirection === 'left') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-moveSize, 0, validLength * stackInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1, 1, 1 - validLength * scaleInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-rotateZDeg, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n      } else if (snapDirection === 'right') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-validLength * stackInterval, 0, moveSize], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1 - validLength * scaleInterval, 1, 1], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, rotateZDeg], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n      }\n\n      transform.push({\n        translateX: translateX\n      }, {\n        scale: scale\n      }, {\n        rotateZ: rotateZ\n      });\n      return styles;\n    };\n\n    _f._closure = {\n      screen: {\n        width: screen.width\n      },\n      modeConfig: modeConfig,\n      getCommonVariables: getCommonVariables,\n      getCommonStyles: getCommonStyles,\n      interpolate: _reactNativeReanimated.interpolate,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      }\n    };\n    _f.asString = \"function _f(_value){const{screen,modeConfig,getCommonVariables,getCommonStyles,interpolate,Extrapolate}=jsThis._closure;{const{showLength:showLength,snapDirection='left',moveSize=screen.width,stackInterval=18,scaleInterval=0.04,opacityInterval=0.1,rotateZDeg=30}=modeConfig;const transform=[];const{validLength:validLength,value:value,inputRange:inputRange}=getCommonVariables({showLength:showLength,value:_value,snapDirection:snapDirection});const{zIndex:zIndex,opacity:opacity}=getCommonStyles({validLength:validLength,value:value,opacityInterval:opacityInterval,snapDirection:snapDirection});const styles={transform:transform,zIndex:zIndex,opacity:opacity};let translateX;let scale;let rotateZ;if(snapDirection==='left'){translateX=interpolate(value,inputRange,[-moveSize,0,validLength*stackInterval],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1,1,1-validLength*scaleInterval],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[-rotateZDeg,0,0],Extrapolate.CLAMP)+\\\"deg\\\";}else if(snapDirection==='right'){translateX=interpolate(value,inputRange,[-validLength*stackInterval,0,moveSize],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1-validLength*scaleInterval,1,1],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[0,0,rotateZDeg],Extrapolate.CLAMP)+\\\"deg\\\";}transform.push({translateX:translateX},{scale:scale},{rotateZ:rotateZ});return styles;}}\";\n    _f.__workletHash = 3265668150098;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/layouts/stack.ts (37:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}\n\nfunction useHorizontalStackLayout() {\n  var customAnimationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var customConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = (0, _react.useMemo)(function () {\n    return _objectSpread({\n      type: customAnimationConfig.snapDirection === 'right' ? 'negative' : 'positive',\n      viewCount: customAnimationConfig.showLength\n    }, customConfig);\n  }, [customAnimationConfig, customConfig]);\n  return {\n    layout: horizontalStackLayout(customAnimationConfig),\n    config: config\n  };\n}\n\nfunction verticalStackLayout() {\n  var modeConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _f = function _f(_value) {\n      var showLength = modeConfig.showLength,\n          _modeConfig$snapDirec2 = modeConfig.snapDirection,\n          snapDirection = _modeConfig$snapDirec2 === void 0 ? 'left' : _modeConfig$snapDirec2,\n          _modeConfig$moveSize2 = modeConfig.moveSize,\n          moveSize = _modeConfig$moveSize2 === void 0 ? screen.width : _modeConfig$moveSize2,\n          _modeConfig$stackInte2 = modeConfig.stackInterval,\n          stackInterval = _modeConfig$stackInte2 === void 0 ? 18 : _modeConfig$stackInte2,\n          _modeConfig$scaleInte2 = modeConfig.scaleInterval,\n          scaleInterval = _modeConfig$scaleInte2 === void 0 ? 0.04 : _modeConfig$scaleInte2,\n          _modeConfig$opacityIn2 = modeConfig.opacityInterval,\n          opacityInterval = _modeConfig$opacityIn2 === void 0 ? 0.1 : _modeConfig$opacityIn2,\n          _modeConfig$rotateZDe2 = modeConfig.rotateZDeg,\n          rotateZDeg = _modeConfig$rotateZDe2 === void 0 ? 30 : _modeConfig$rotateZDe2;\n      var transform = [];\n\n      var _getCommonVariables2 = getCommonVariables({\n        showLength: showLength,\n        value: _value,\n        snapDirection: snapDirection\n      }),\n          validLength = _getCommonVariables2.validLength,\n          value = _getCommonVariables2.value,\n          inputRange = _getCommonVariables2.inputRange;\n\n      var _getCommonStyles2 = getCommonStyles({\n        validLength: validLength,\n        value: value,\n        opacityInterval: opacityInterval,\n        snapDirection: snapDirection\n      }),\n          zIndex = _getCommonStyles2.zIndex,\n          opacity = _getCommonStyles2.opacity;\n\n      var styles = {\n        transform: transform,\n        zIndex: zIndex,\n        opacity: opacity\n      };\n      var translateX;\n      var scale;\n      var rotateZ;\n      var translateY;\n\n      if (snapDirection === 'left') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-moveSize, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1, 1, 1 - validLength * scaleInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-rotateZDeg, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n        translateY = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, validLength * stackInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n      } else if (snapDirection === 'right') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, moveSize], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1 - validLength * scaleInterval, 1, 1], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, rotateZDeg], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n        translateY = (0, _reactNativeReanimated.interpolate)(value, inputRange, [validLength * stackInterval, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n      }\n\n      transform.push({\n        translateX: translateX\n      }, {\n        scale: scale\n      }, {\n        rotateZ: rotateZ\n      }, {\n        translateY: translateY\n      });\n      return styles;\n    };\n\n    _f._closure = {\n      screen: {\n        width: screen.width\n      },\n      modeConfig: modeConfig,\n      getCommonVariables: getCommonVariables,\n      getCommonStyles: getCommonStyles,\n      interpolate: _reactNativeReanimated.interpolate,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      }\n    };\n    _f.asString = \"function _f(_value){const{screen,modeConfig,getCommonVariables,getCommonStyles,interpolate,Extrapolate}=jsThis._closure;{const{showLength:showLength,snapDirection='left',moveSize=screen.width,stackInterval=18,scaleInterval=0.04,opacityInterval=0.1,rotateZDeg=30}=modeConfig;const transform=[];const{validLength:validLength,value:value,inputRange:inputRange}=getCommonVariables({showLength:showLength,value:_value,snapDirection:snapDirection});const{zIndex:zIndex,opacity:opacity}=getCommonStyles({validLength:validLength,value:value,opacityInterval:opacityInterval,snapDirection:snapDirection});const styles={transform:transform,zIndex:zIndex,opacity:opacity};let translateX;let scale;let rotateZ;let translateY;if(snapDirection==='left'){translateX=interpolate(value,inputRange,[-moveSize,0,0],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1,1,1-validLength*scaleInterval],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[-rotateZDeg,0,0],Extrapolate.CLAMP)+\\\"deg\\\";translateY=interpolate(value,inputRange,[0,0,validLength*stackInterval],Extrapolate.CLAMP);}else if(snapDirection==='right'){translateX=interpolate(value,inputRange,[0,0,moveSize],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1-validLength*scaleInterval,1,1],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[0,0,rotateZDeg],Extrapolate.CLAMP)+\\\"deg\\\";translateY=interpolate(value,inputRange,[validLength*stackInterval,0,0],Extrapolate.CLAMP);}transform.push({translateX:translateX},{scale:scale},{rotateZ:rotateZ},{translateY:translateY});return styles;}}\";\n    _f.__workletHash = 2365281434390;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/layouts/stack.ts (152:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}\n\nvar getCommonVariables = function () {\n  var _f = function _f(opts) {\n    var showLength = opts.showLength,\n        _value = opts.value,\n        snapDirection = opts.snapDirection;\n\n    function easeInOutCubic(v) {\n      return v < 0.5 ? 4 * v * v * v : 1 - Math.pow(-2 * v + 2, 3) / 2;\n    }\n\n    var page = Math.floor(Math.abs(_value));\n    var diff = Math.abs(_value) % 1;\n    var value = _value < 0 ? -(page + easeInOutCubic(diff)) : page + easeInOutCubic(diff);\n    var validLength = showLength - 1;\n    var inputRange;\n\n    if (snapDirection === 'left') {\n      inputRange = [-1, 0, validLength];\n    } else if (snapDirection === 'right') {\n      inputRange = [-validLength, 0, 1];\n    } else {\n      throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n      inputRange: inputRange,\n      validLength: validLength,\n      value: value\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function getCommonVariables(opts){const{showLength:showLength,value:_value,snapDirection:snapDirection}=opts;function easeInOutCubic(v){return v<0.5?4*v*v*v:1-Math.pow(-2*v+2,3)/2;}const page=Math.floor(Math.abs(_value));const diff=Math.abs(_value)%1;const value=_value<0?-(page+easeInOutCubic(diff)):page+easeInOutCubic(diff);const validLength=showLength-1;let inputRange;if(snapDirection==='left'){inputRange=[-1,0,validLength];}else if(snapDirection==='right'){inputRange=[-validLength,0,1];}else{throw Error('snapDirection must be set to either left or right');}return{inputRange:inputRange,validLength:validLength,value:value};}\";\n  _f.__workletHash = 3893657980264;\n  _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/layouts/stack.ts (259:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar getCommonStyles = function () {\n  var _f = function _f(opts) {\n    var snapDirection = opts.snapDirection,\n        validLength = opts.validLength,\n        value = opts.value,\n        opacityInterval = opts.opacityInterval;\n    var zIndex;\n    var opacity;\n\n    if (snapDirection === 'left') {\n      zIndex = Math.floor((0, _reactNativeReanimated.interpolate)(value, [-1.5, -1, -1 + Number.MIN_VALUE, 0, validLength], [Number.MIN_VALUE, validLength, validLength, validLength - 1, -1]) * 10000) / 100;\n      opacity = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, validLength - 1, validLength], [0.25, 1, 1 - (validLength - 1) * opacityInterval, 0.25]);\n    } else if (snapDirection === 'right') {\n      zIndex = Math.floor((0, _reactNativeReanimated.interpolate)(value, [-validLength, 0, 1 - Number.MIN_VALUE, 1, 1.5], [1, validLength - 1, validLength, validLength, Number.MIN_VALUE]) * 10000) / 100;\n      opacity = (0, _reactNativeReanimated.interpolate)(value, [-validLength, 1 - validLength, 0, 1], [0.25, 1 - (validLength - 1) * opacityInterval, 1, 0.25]);\n    } else {\n      throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n      zIndex: zIndex,\n      opacity: opacity\n    };\n  };\n\n  _f._closure = {\n    interpolate: _reactNativeReanimated.interpolate\n  };\n  _f.asString = \"function getCommonStyles(opts){const{interpolate}=jsThis._closure;{const{snapDirection:snapDirection,validLength:validLength,value:value,opacityInterval:opacityInterval}=opts;let zIndex;let opacity;if(snapDirection==='left'){zIndex=Math.floor(interpolate(value,[-1.5,-1,-1+Number.MIN_VALUE,0,validLength],[Number.MIN_VALUE,validLength,validLength,validLength-1,-1])*10000)/100;opacity=interpolate(value,[-1,0,validLength-1,validLength],[0.25,1,1-(validLength-1)*opacityInterval,0.25]);}else if(snapDirection==='right'){zIndex=Math.floor(interpolate(value,[-validLength,0,1-Number.MIN_VALUE,1,1.5],[1,validLength-1,validLength,validLength,Number.MIN_VALUE])*10000)/100;opacity=interpolate(value,[-validLength,1-validLength,0,1],[0.25,1-(validLength-1)*opacityInterval,1,0.25]);}else{throw Error('snapDirection must be set to either left or right');}return{zIndex:zIndex,opacity:opacity};}}\";\n  _f.__workletHash = 16145327689090;\n  _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/layouts/stack.ts (295:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["stack.ts"],"names":["screen","Dimensions","width","modeConfig","getCommonVariables","interpolate","getCommonStyles","showLength","snapDirection","moveSize","stackInterval","scaleInterval","opacityInterval","rotateZDeg","Extrapolate","transform","CLAMP","validLength","value","inputRange","zIndex","opacity","styles","translateX","scale","rotateZ","customAnimationConfig","customConfig","config","type","viewCount","layout","horizontalStackLayout","translateY","opts","_value","v","Math","page","diff","easeInOutCubic","Error","Number"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { Dimensions, TransformsStyle, ViewStyle } from 'react-native';\nimport { Extrapolate, interpolate } from 'react-native-reanimated';\nimport type { ComputedDirectionTypes, CustomConfig } from '../types';\n\nconst screen = Dimensions.get('window');\n\nexport interface ILayoutConfig {\n    showLength?: number;\n    moveSize?: number;\n    stackInterval?: number;\n    scaleInterval?: number;\n    opacityInterval?: number;\n    rotateZDeg?: number;\n    snapDirection?: 'left' | 'right';\n}\n\nexport type TStackModeProps = ComputedDirectionTypes<{\n    /**\n     * Carousel Animated transitions.\n     */\n    mode?: 'horizontal-stack' | 'vertical-stack';\n    /**\n     * Stack animation style.\n     * @default\n     *     mode: 'vertical',\n     *     snapDirection: 'right',\n     *     moveSize: window.width,\n     *     stackInterval: 30,\n     *     scaleInterval: 0.08,\n     *     rotateZDeg: 135,\n     */\n    modeConfig?: ILayoutConfig;\n}>;\n\nexport function horizontalStackLayout(modeConfig: ILayoutConfig = {}) {\n    return (_value: number) => {\n        'worklet';\n\n        const {\n            showLength,\n            snapDirection = 'left',\n            moveSize = screen.width,\n            stackInterval = 18,\n            scaleInterval = 0.04,\n            opacityInterval = 0.1,\n            rotateZDeg = 30,\n        } = modeConfig;\n\n        const transform: TransformsStyle['transform'] = [];\n        const { validLength, value, inputRange } = getCommonVariables({\n            showLength: showLength!,\n            value: _value,\n            snapDirection,\n        });\n        const { zIndex, opacity } = getCommonStyles({\n            validLength,\n            value,\n            opacityInterval,\n            snapDirection,\n        });\n\n        const styles: ViewStyle = {\n            transform,\n            zIndex,\n            opacity,\n        };\n\n        let translateX: number;\n        let scale: number;\n        let rotateZ: string;\n\n        if (snapDirection === 'left') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-moveSize, 0, validLength * stackInterval],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1, 1, 1 - validLength * scaleInterval],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [-rotateZDeg, 0, 0],\n                Extrapolate.CLAMP\n            )}deg`;\n        } else if (snapDirection === 'right') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-validLength * stackInterval, 0, moveSize],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1 - validLength * scaleInterval, 1, 1],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [0, 0, rotateZDeg],\n                Extrapolate.CLAMP\n            )}deg`;\n        }\n\n        transform.push(\n            {\n                translateX: translateX!,\n            },\n            {\n                scale: scale!,\n            },\n            {\n                rotateZ: rotateZ!,\n            }\n        );\n\n        return styles;\n    };\n}\n\nexport function useHorizontalStackLayout(\n    customAnimationConfig: ILayoutConfig = {},\n    customConfig: CustomConfig = {}\n) {\n    const config = useMemo(\n        () => ({\n            type:\n                customAnimationConfig.snapDirection === 'right'\n                    ? 'negative'\n                    : 'positive',\n            viewCount: customAnimationConfig.showLength,\n            ...customConfig,\n        }),\n        [customAnimationConfig, customConfig]\n    );\n\n    return {\n        layout: horizontalStackLayout(customAnimationConfig),\n        config,\n    };\n}\n\nexport function verticalStackLayout(modeConfig: ILayoutConfig = {}) {\n    return (_value: number) => {\n        'worklet';\n\n        const {\n            showLength,\n            snapDirection = 'left',\n            moveSize = screen.width,\n            stackInterval = 18,\n            scaleInterval = 0.04,\n            opacityInterval = 0.1,\n            rotateZDeg = 30,\n        } = modeConfig;\n        const transform: TransformsStyle['transform'] = [];\n        const { validLength, value, inputRange } = getCommonVariables({\n            showLength: showLength!,\n            value: _value,\n            snapDirection,\n        });\n        const { zIndex, opacity } = getCommonStyles({\n            validLength,\n            value,\n            opacityInterval,\n            snapDirection,\n        });\n\n        const styles: ViewStyle = {\n            transform,\n            zIndex,\n            opacity,\n        };\n\n        let translateX: number;\n        let scale: number;\n        let rotateZ: string;\n        let translateY: number;\n\n        if (snapDirection === 'left') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-moveSize, 0, 0],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1, 1, 1 - validLength * scaleInterval],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [-rotateZDeg, 0, 0],\n                Extrapolate.CLAMP\n            )}deg`;\n            translateY = interpolate(\n                value,\n                inputRange,\n                [0, 0, validLength * stackInterval],\n                Extrapolate.CLAMP\n            );\n        } else if (snapDirection === 'right') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [0, 0, moveSize],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1 - validLength * scaleInterval, 1, 1],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [0, 0, rotateZDeg],\n                Extrapolate.CLAMP\n            )}deg`;\n            translateY = interpolate(\n                value,\n                inputRange,\n                [validLength * stackInterval, 0, 0],\n                Extrapolate.CLAMP\n            );\n        }\n\n        transform.push(\n            {\n                translateX: translateX!,\n            },\n            {\n                scale: scale!,\n            },\n            {\n                rotateZ: rotateZ!,\n            },\n            {\n                translateY: translateY!,\n            }\n        );\n\n        return styles;\n    };\n}\n\nfunction getCommonVariables(opts: {\n    value: number;\n    showLength: number;\n    snapDirection: 'left' | 'right';\n}) {\n    'worklet';\n\n    const { showLength, value: _value, snapDirection } = opts;\n    function easeInOutCubic(v: number): number {\n        return v < 0.5 ? 4 * v * v * v : 1 - Math.pow(-2 * v + 2, 3) / 2;\n    }\n    const page = Math.floor(Math.abs(_value));\n    const diff = Math.abs(_value) % 1;\n    const value =\n        _value < 0\n            ? -(page + easeInOutCubic(diff))\n            : page + easeInOutCubic(diff);\n    const validLength = showLength! - 1;\n\n    let inputRange: [number, number, number];\n\n    if (snapDirection === 'left') {\n        inputRange = [-1, 0, validLength];\n    } else if (snapDirection === 'right') {\n        inputRange = [-validLength, 0, 1];\n    } else {\n        throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n        inputRange,\n        validLength,\n        value,\n    };\n}\n\nfunction getCommonStyles(opts: {\n    value: number;\n    validLength: number;\n    opacityInterval: number;\n    snapDirection: 'left' | 'right';\n}) {\n    'worklet';\n\n    const { snapDirection, validLength, value, opacityInterval } = opts;\n\n    let zIndex: number;\n    let opacity: number;\n\n    if (snapDirection === 'left') {\n        zIndex =\n            Math.floor(\n                interpolate(\n                    value,\n                    [-1.5, -1, -1 + Number.MIN_VALUE, 0, validLength],\n                    [\n                        Number.MIN_VALUE,\n                        validLength,\n                        validLength,\n                        validLength - 1,\n                        -1,\n                    ]\n                ) * 10000\n            ) / 100;\n\n        opacity = interpolate(\n            value,\n            [-1, 0, validLength - 1, validLength],\n            [0.25, 1, 1 - (validLength - 1) * opacityInterval, 0.25]\n        );\n    } else if (snapDirection === 'right') {\n        zIndex =\n            Math.floor(\n                interpolate(\n                    value,\n                    [-validLength, 0, 1 - Number.MIN_VALUE, 1, 1.5],\n                    [\n                        1,\n                        validLength - 1,\n                        validLength,\n                        validLength,\n                        Number.MIN_VALUE,\n                    ]\n                ) * 10000\n            ) / 100;\n        opacity = interpolate(\n            value,\n            [-validLength, 1 - validLength, 0, 1],\n            [0.25, 1 - (validLength - 1) * opacityInterval, 1, 0.25]\n        );\n    } else {\n        throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n        zIndex,\n        opacity,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}