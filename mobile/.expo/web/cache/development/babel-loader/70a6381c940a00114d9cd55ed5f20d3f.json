{"ast":null,"code":"import { Image, Stack, Text } from \"native-base\";\nimport React from \"react\";\nimport { getImageUrl } from \"../../helpers/utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ProductCard = function ProductCard(_ref) {\n  var isSmallScreen = _ref.isSmallScreen,\n      product = _ref.product;\n  return _jsxs(Stack, {\n    flex: 1,\n    alignItems: \"center\",\n    flexBasis: isSmallScreen == true ? '48%' : '24%',\n    width: isSmallScreen == true ? '48%' : '24%',\n    paddingBottom: 5,\n    height: isSmallScreen == true ? 229.8 : 285.5,\n    children: [_jsx(Image, {\n      src: getImageUrl(product.thumb),\n      alt: product.name,\n      height: isSmallScreen == true ? 138.8 : 223.5,\n      width: isSmallScreen == true ? 138.8 : 223.5\n    }), _jsx(Text, {\n      numberOfLines: 1,\n      ellipsizeMode: \"tail\",\n      children: product.name\n    }), _jsx(Text, {\n      children: new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: 'XOF'\n      }).format(product.price)\n    }), product.price_before_promotion != null ? _jsx(Text, {\n      style: {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'solid'\n      },\n      children: new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: 'XOF'\n      }).format(product.price_before_promotion)\n    }) : null]\n  });\n};\n\nexport default ProductCard;","map":{"version":3,"sources":["/Users/macpro/Desktop/computer-science/projects/laboutiik/mobile/components/custom/ProductCard.tsx"],"names":["Image","Stack","Text","React","getImageUrl","ProductCard","isSmallScreen","product","thumb","name","Intl","NumberFormat","style","currency","format","price","price_before_promotion","textDecorationLine","textDecorationStyle"],"mappings":"AAAA,SAGEA,KAHF,EAKEC,KALF,EAMEC,IANF,QASO,aATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT;;;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAEC,aAAF,QAAEA,aAAF;AAAA,MAAiBC,OAAjB,QAAiBA,OAAjB;AAAA,SAClB,MAAC,KAAD;AAAO,IAAA,IAAI,EAAE,CAAb;AAAgB,IAAA,UAAU,EAAC,QAA3B;AAAoC,IAAA,SAAS,EAAED,aAAa,IAAI,IAAjB,GAAwB,KAAxB,GAAgC,KAA/E;AAAsF,IAAA,KAAK,EAAEA,aAAa,IAAI,IAAjB,GAAwB,KAAxB,GAAgC,KAA7H;AAAoI,IAAA,aAAa,EAAE,CAAnJ;AAAsJ,IAAA,MAAM,EAAEA,aAAa,IAAI,IAAjB,GAAwB,KAAxB,GAA+B,KAA7L;AAAA,eACI,KAAC,KAAD;AAAO,MAAA,GAAG,EAAEF,WAAW,CAACG,OAAO,CAACC,KAAT,CAAvB;AAAwC,MAAA,GAAG,EAAED,OAAO,CAACE,IAArD;AAA2D,MAAA,MAAM,EAAEH,aAAa,IAAI,IAAjB,GAAwB,KAAxB,GAAgC,KAAnG;AAA0G,MAAA,KAAK,EAAEA,aAAa,IAAI,IAAjB,GAAwB,KAAxB,GAAgC;AAAjJ,MADJ,EAEI,KAAC,IAAD;AAAM,MAAA,aAAa,EAAE,CAArB;AAAwB,MAAA,aAAa,EAAC,MAAtC;AAAA,gBAA8CC,OAAO,CAACE;AAAtD,MAFJ,EAGI,KAAC,IAAD;AAAA,gBAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAA/B,EAAuEC,MAAvE,CAA8EP,OAAO,CAACQ,KAAtF;AAAP,MAHJ,EAKMR,OAAO,CAACS,sBAAR,IAAkC,IAAlC,GACA,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,kBAAkB,EAAE,cAArB;AAAqCC,QAAAA,mBAAmB,EAAE;AAA1D,OAAb;AAAA,gBAAkF,IAAIR,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAA/B,EAAuEC,MAAvE,CAA8EP,OAAO,CAACS,sBAAtF;AAAlF,MADA,GAGA,IARN;AAAA,IADkB;AAAA,CAApB;;AAcA,eAAeX,WAAf","sourcesContent":["import {\n  AspectRatio,\n  Box,\n  Image,\n  Center,\n  Stack,\n  Text,\n  Heading,\n  HStack,\n} from \"native-base\";\nimport React from \"react\";\nimport { Product } from \"../../@types/product\";\nimport { getImageUrl } from \"../../helpers/utils\";\n\ntype Props = {\n  isSmallScreen?: boolean,\n  product: Product\n}\nconst ProductCard = ({isSmallScreen, product}: Props) => (\n  <Stack flex={1} alignItems=\"center\" flexBasis={isSmallScreen == true ? '48%' : '24%'} width={isSmallScreen == true ? '48%' : '24%'} paddingBottom={5} height={isSmallScreen == true ? 229.8: 285.5}>\n      <Image src={getImageUrl(product.thumb)} alt={product.name} height={isSmallScreen == true ? 138.8 : 223.5} width={isSmallScreen == true ? 138.8 : 223.5}/>\n      <Text numberOfLines={1} ellipsizeMode='tail'>{product.name}</Text>\n      <Text>{new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency: 'XOF' }).format(product.price)}</Text>\n      {\n        product.price_before_promotion != null ? \n        <Text style={{textDecorationLine: 'line-through', textDecorationStyle: 'solid'}}>{new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency: 'XOF' }).format(product.price_before_promotion)}</Text>\n        : \n        null\n      }\n  </Stack>\n);\n\nexport default ProductCard;\n"]},"metadata":{},"sourceType":"module"}