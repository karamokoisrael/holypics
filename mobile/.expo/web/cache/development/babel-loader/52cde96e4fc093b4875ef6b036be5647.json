{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport { NativeBaseProvider } from \"native-base\";\nimport theme from \"./constants/theme\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport Navigation from \"./navigation\";\nimport DataProvider from \"./components/providers/DataProvider\";\nimport { Fragment, useEffect, useState } from 'react';\nimport useStore from \"./context/store\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var isLoadingComplete = useCachedResources();\n\n  var _useState = useState(\"light\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      colorMode = _useState2[0],\n      setColorMode = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              useStore.subscribe(function (state) {\n                setColorMode(state.colorMode);\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return _jsx(NativeBaseProvider, {\n      theme: _objectSpread(_objectSpread({}, theme), {}, {\n        config: _objectSpread(_objectSpread({}, theme.config), {}, {\n          initialColorMode: colorMode\n        })\n      }),\n      children: _jsx(DataProvider, {\n        children: _jsxs(Fragment, {\n          children: [_jsx(Navigation, {\n            colorScheme: colorMode\n          }), _jsx(StatusBar, {})]\n        })\n      })\n    });\n  }\n}","map":{"version":3,"sources":["/Users/macpro/Desktop/computer-science/projects/laboutiik/mobile/App.tsx"],"names":["StatusBar","NativeBaseProvider","theme","useCachedResources","Navigation","DataProvider","Fragment","useEffect","useState","useStore","App","isLoadingComplete","colorMode","setColorMode","subscribe","state","config","initialColorMode"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,8BAAP;AACA,SAASC,kBAAT,QAAwC,aAAxC;AACA,OAAOC,KAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,QAAP;;;AACA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAMC,iBAAiB,GAAGR,kBAAkB,EAA5C;;AACA,kBAAmCK,QAAQ,CAAmB,OAAnB,CAA3C;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAmBC,YAAnB;;AAEAN,EAAAA,SAAS,CAAC,YAAI;AACZ,KAAC;AAAA;AAAA;AAAA;AAAA;AACCE,cAAAA,QAAQ,CAACK,SAAT,CAAmB,UAAAC,KAAK,EAAG;AACzBF,gBAAAA,YAAY,CAACE,KAAK,CAACH,SAAP,CAAZ;AACD,eAFD;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAKD,GANQ,EAMN,EANM,CAAT;;AAQA,MAAI,CAACD,iBAAL,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WACE,KAAC,kBAAD;AAAoB,MAAA,KAAK,kCAAMT,KAAN;AAAac,QAAAA,MAAM,kCAAMd,KAAK,CAACc,MAAZ;AAAoBC,UAAAA,gBAAgB,EAAEL;AAAtC;AAAnB,QAAzB;AAAA,gBACE,KAAC,YAAD;AAAA,kBACE,MAAC,QAAD;AAAA,qBACE,KAAC,UAAD;AAAY,YAAA,WAAW,EAAEA;AAAzB,YADF,EAEE,KAAC,SAAD,KAFF;AAAA;AADF;AADF,MADF;AAUD;AACF","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport { NativeBaseProvider, Box } from \"native-base\";\nimport theme from './constants/theme';\nimport useCachedResources from './hooks/useCachedResources';\nimport Navigation from './navigation';\nimport DataProvider from './components/providers/DataProvider';\nimport { Fragment, useEffect, useState } from 'react';\nimport useStore from './context/store';\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const [colorMode,  setColorMode] = useState<\"light\" | \"dark\">(\"light\")\n  \n  useEffect(()=>{\n    (async ()=>{\n      useStore.subscribe(state=> {\n        setColorMode(state.colorMode)\n      });\n    })()\n  }, [])\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <NativeBaseProvider theme={{...theme, config: {...theme.config, initialColorMode: colorMode}}}>\n        <DataProvider>\n          <Fragment>\n            <Navigation colorScheme={colorMode} />        \n            <StatusBar />\n          </Fragment>\n        </DataProvider>\n      </NativeBaseProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}