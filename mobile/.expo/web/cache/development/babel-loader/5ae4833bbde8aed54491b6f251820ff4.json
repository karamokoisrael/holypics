{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parallaxLayout = parallaxLayout;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction parallaxLayout(baseConfig) {\n  var modeConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var size = baseConfig.size,\n      vertical = baseConfig.vertical;\n  var _modeConfig$parallaxS = modeConfig.parallaxScrollingOffset,\n      parallaxScrollingOffset = _modeConfig$parallaxS === void 0 ? 100 : _modeConfig$parallaxS,\n      _modeConfig$parallaxS2 = modeConfig.parallaxScrollingScale,\n      parallaxScrollingScale = _modeConfig$parallaxS2 === void 0 ? 0.8 : _modeConfig$parallaxS2,\n      _modeConfig$parallaxA = modeConfig.parallaxAdjacentItemScale,\n      parallaxAdjacentItemScale = _modeConfig$parallaxA === void 0 ? Math.pow(parallaxScrollingScale, 2) : _modeConfig$parallaxA;\n  return function () {\n    var _f = function _f(value) {\n      var translate = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [-size + parallaxScrollingOffset, 0, size - parallaxScrollingOffset]);\n      var zIndex = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [0, size, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n      var scale = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [parallaxAdjacentItemScale, parallaxScrollingScale, parallaxAdjacentItemScale], _reactNativeReanimated.Extrapolate.CLAMP);\n      return {\n        transform: [vertical ? {\n          translateY: translate\n        } : {\n          translateX: translate\n        }, {\n          scale: scale\n        }],\n        zIndex: zIndex\n      };\n    };\n\n    _f._closure = {\n      interpolate: _reactNativeReanimated.interpolate,\n      size: size,\n      parallaxScrollingOffset: parallaxScrollingOffset,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      },\n      parallaxAdjacentItemScale: parallaxAdjacentItemScale,\n      parallaxScrollingScale: parallaxScrollingScale,\n      vertical: vertical\n    };\n    _f.asString = \"function _f(value){const{interpolate,size,parallaxScrollingOffset,Extrapolate,parallaxAdjacentItemScale,parallaxScrollingScale,vertical}=jsThis._closure;{const translate=interpolate(value,[-1,0,1],[-size+parallaxScrollingOffset,0,size-parallaxScrollingOffset]);const zIndex=interpolate(value,[-1,0,1],[0,size,0],Extrapolate.CLAMP);const scale=interpolate(value,[-1,0,1],[parallaxAdjacentItemScale,parallaxScrollingScale,parallaxAdjacentItemScale],Extrapolate.CLAMP);return{transform:[vertical?{translateY:translate}:{translateX:translate},{scale:scale}],zIndex:zIndex};}}\";\n    _f.__workletHash = 942233491674;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/layouts/parallax.ts (46:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}","map":{"version":3,"sources":["parallax.ts"],"names":["parallaxScrollingOffset","size","interpolate","parallaxScrollingScale","parallaxAdjacentItemScale","Extrapolate","CLAMP","vertical","modeConfig","baseConfig","Math","translate","zIndex","scale","transform","translateY","translateX"],"mappings":";;;;;AAAA,IAAA,sBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAkCO,SAAA,cAAA,CAAA,UAAA,EAGL;AADEQ,MAAAA,UACF,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD8B,EAA5BA;AAEA,MAAQP,IAAR,GAA2BQ,UAA3B,CAAA,IAAA;AAAA,MAAcF,QAAd,GAA2BE,UAA3B,CAAA,QAAA;AACA,MAAA,qBAAA,GAIID,UAJJ,CAAA,uBAAA;AAAA,MACIR,uBADJ,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,qBAAA;AAAA,MAAA,sBAAA,GAIIQ,UAJJ,CAAA,sBAAA;AAAA,MAEIL,sBAFJ,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,sBAAA;AAAA,MAAA,qBAAA,GAIIK,UAJJ,CAAA,yBAAA;AAAA,MAGIJ,yBAHJ,GAAA,qBAAA,KAAA,KAAA,CAAA,GAGgCM,IAAI,CAAJA,GAAAA,CAAAA,sBAAAA,EAHhC,CAGgCA,CAHhC,GAAA,qBAAA;AAMA,SAAA,YAAA;AAAA,QAAA,EAAA,GAAA,SAAA,EAAA,CAAA,KAAA,EAA0B;AAEtB,UAAMC,SAAS,GAAG,CAAA,GAAA,sBAAA,CAAA,WAAA,EAAA,KAAA,EAEd,CAAC,CAAD,CAAA,EAAA,CAAA,EAFc,CAEd,CAFc,EAGd,CAAC,CAAA,IAAA,GAAD,uBAAA,EAAA,CAAA,EAAqCV,IAAI,GAH7C,uBAGI,CAHc,CAAlB;AAMA,UAAMW,MAAM,GAAG,CAAA,GAAA,sBAAA,CAAA,WAAA,EAAA,KAAA,EAEX,CAAC,CAAD,CAAA,EAAA,CAAA,EAFW,CAEX,CAFW,EAGX,CAAA,CAAA,EAAA,IAAA,EAHW,CAGX,CAHW,EAIXP,sBAAAA,CAAAA,WAAAA,CAJJ,KAAe,CAAf;AAOA,UAAMQ,KAAK,GAAG,CAAA,GAAA,sBAAA,CAAA,WAAA,EAAA,KAAA,EAEV,CAAC,CAAD,CAAA,EAAA,CAAA,EAFU,CAEV,CAFU,EAGV,CAAA,yBAAA,EAAA,sBAAA,EAHU,yBAGV,CAHU,EAQVR,sBAAAA,CAAAA,WAAAA,CARJ,KAAc,CAAd;AAWA,aAAO;AACHS,QAAAA,SAAS,EAAE,CACPP,QAAQ,GACF;AACIQ,UAAAA,UAAU,EAFZ;AACF,SADE,GAIF;AACIC,UAAAA,UAAU,EANb;AAKD,SALC,EAQP;AACIH,UAAAA,KAAK,EAVV;AASC,SARO,CADR;AAaHD,QAAAA,MAAM,EAbV;AAAO,OAAP;AA1BJ,KAAA;;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA;AAAA,MAAA,WAAA,EAzCYV,sBAAAA,CAAAA,WAyCZ;AAAA,MAAA,IAAA,EA1CgDD,IA0ChD;AAAA,MAAA,uBAAA,EA3C2FD,uBA2C3F;AAAA,MAAA,WAAA,EAAA;AAAA,QAAA,KAAA,EAzC2HK,sBAAAA,CAAAA,WAAAA,CAAYC;AAyCvI,OAAA;AAAA,MAAA,yBAAA,EAzC+FF,yBAyC/F;AAAA,MAAA,sBAAA,EAzCuED,sBAyCvE;AAAA,MAAA,QAAA,EAvCYI;AAuCZ,KAAA;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA,6jBAAA;AAAA,IAAA,EAAA,CAAA,aAAA,GAAA,YAAA;AAAA,IAAA,EAAA,CAAA,UAAA,GAAA,0FAAA;;AAAA,IAAA,MAAA,CAAA,uBAAA,CAAA,EAAA;;AAAA,WAAA,EAAA;AAAA,GAAA,EAAA;AA0CH","sourcesContent":["import { Extrapolate, interpolate } from 'react-native-reanimated';\nimport type { ComputedDirectionTypes } from '../types';\n\ntype TBaseConfig = {\n    size: number;\n    vertical: boolean;\n};\n\nexport interface ILayoutConfig {\n    /**\n     * control prev/next item offset.\n     * @default 100\n     */\n    parallaxScrollingOffset?: number;\n    /**\n     * control prev/current/next item offset.\n     * @default 0.8\n     */\n    parallaxScrollingScale?: number;\n    /**\n     * control prev/next item offset.\n     * @default Math.pow(parallaxScrollingScale, 2)\n     */\n    parallaxAdjacentItemScale?: number;\n}\n\nexport type TParallaxModeProps = ComputedDirectionTypes<{\n    /**\n     * Carousel Animated transitions.\n     */\n    mode?: 'parallax';\n    modeConfig?: ILayoutConfig;\n}>;\n\nexport function parallaxLayout(\n    baseConfig: TBaseConfig,\n    modeConfig: ILayoutConfig = {}\n) {\n    const { size, vertical } = baseConfig;\n    const {\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        parallaxAdjacentItemScale = Math.pow(parallaxScrollingScale, 2),\n    } = modeConfig;\n\n    return (value: number) => {\n        'worklet';\n        const translate = interpolate(\n            value,\n            [-1, 0, 1],\n            [-size + parallaxScrollingOffset, 0, size - parallaxScrollingOffset]\n        );\n\n        const zIndex = interpolate(\n            value,\n            [-1, 0, 1],\n            [0, size, 0],\n            Extrapolate.CLAMP\n        );\n\n        const scale = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                parallaxAdjacentItemScale,\n                parallaxScrollingScale,\n                parallaxAdjacentItemScale,\n            ],\n            Extrapolate.CLAMP\n        );\n\n        return {\n            transform: [\n                vertical\n                    ? {\n                          translateY: translate,\n                      }\n                    : {\n                          translateX: translate,\n                      },\n                {\n                    scale,\n                },\n            ],\n            zIndex,\n        };\n    };\n}\n"]},"metadata":{},"sourceType":"script"}