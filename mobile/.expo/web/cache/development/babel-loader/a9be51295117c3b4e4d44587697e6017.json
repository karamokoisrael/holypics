{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useVisibleRanges = useVisibleRanges;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction useVisibleRanges(options) {\n  var _options$total = options.total,\n      total = _options$total === void 0 ? 0 : _options$total,\n      viewSize = options.viewSize,\n      translation = options.translation,\n      _options$windowSize = options.windowSize,\n      _windowSize = _options$windowSize === void 0 ? 0 : _options$windowSize;\n\n  var windowSize = total <= _windowSize ? total : _windowSize;\n  var ranges = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var positiveCount = Math.round(windowSize / 2);\n      var negativeCount = windowSize - positiveCount;\n      var curIndex = Math.round(-translation.value / viewSize);\n      curIndex = curIndex < 0 ? curIndex % total + total : curIndex;\n      var negativeRange = [(curIndex - negativeCount + total) % total, (curIndex - 1 + total) % total];\n      var positiveRange = [(curIndex + total) % total, (curIndex + positiveCount + total) % total];\n\n      if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      if (positiveRange[0] > positiveRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      return {\n        negativeRange: negativeRange,\n        positiveRange: positiveRange\n      };\n    };\n\n    _f._closure = {\n      windowSize: windowSize,\n      translation: translation,\n      viewSize: viewSize,\n      total: total\n    };\n    _f.asString = \"function _f(){const{windowSize,translation,viewSize,total}=jsThis._closure;{const positiveCount=Math.round(windowSize/2);const negativeCount=windowSize-positiveCount;let curIndex=Math.round(-translation.value/viewSize);curIndex=curIndex<0?curIndex%total+total:curIndex;const negativeRange=[(curIndex-negativeCount+total)%total,(curIndex-1+total)%total];const positiveRange=[(curIndex+total)%total,(curIndex+positiveCount+total)%total];if(negativeRange[0]<total&&negativeRange[0]>negativeRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}if(positiveRange[0]>positiveRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}return{negativeRange:negativeRange,positiveRange:positiveRange};}}\";\n    _f.__workletHash = 15212293827170;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/hooks/useVisibleRanges.tsx (24:35)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [total, windowSize, translation]);\n  return ranges;\n}","map":{"version":3,"sources":["useVisibleRanges.tsx"],"names":["windowSize","translation","viewSize","total","_windowSize","options","ranges","positiveCount","Math","negativeCount","curIndex","negativeRange","positiveRange"],"mappings":";;;;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAOO,SAAA,gBAAA,CAAA,OAAA,EAKY;AACf,MAAA,cAAA,GAKIK,OALJ,CAAA,KAAA;AAAA,MACIF,KADJ,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,cAAA;AAAA,MAEID,QAFJ,GAKIG,OALJ,CAAA,QAAA;AAAA,MAGIJ,WAHJ,GAKII,OALJ,CAAA,WAAA;AAAA,MAAA,mBAAA,GAKIA,OALJ,CAAA,UAAA;AAAA,MAIgBD,WAJhB,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;;AAOA,MAAMJ,UAAU,GAAGG,KAAK,IAALA,WAAAA,GAAAA,KAAAA,GAAnB,WAAA;AAEA,MAAMG,MAAM,GAAG,CAAA,GAAA,sBAAA,CAAA,eAAA,EAAA,YAAA;AAAA,QAAA,EAAA,GAAA,SAAA,EAAA,GAAsB;AACjC,UAAMC,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAWR,UAAU,GAA3C,CAAsBQ,CAAtB;AACA,UAAMC,aAAa,GAAGT,UAAU,GAAhC,aAAA;AACA,UAAIU,QAAQ,GAAGF,IAAI,CAAJA,KAAAA,CAAW,CAACP,WAAW,CAAZ,KAAA,GAA1B,QAAeO,CAAf;AACAE,MAAAA,QAAQ,GAAGA,QAAQ,GAARA,CAAAA,GAAgBA,QAAQ,GAAT,KAACA,GAAhBA,KAAAA,GAAXA,QAAAA;AACA,UAAMC,aAAa,GAAG,CAClB,CAACD,QAAQ,GAARA,aAAAA,GAAD,KAAA,IADkB,KAAA,EAElB,CAACA,QAAQ,GAARA,CAAAA,GAAD,KAAA,IAFJ,KAAsB,CAAtB;AAIA,UAAME,aAAa,GAAG,CAClB,CAACF,QAAQ,GAAT,KAAA,IADkB,KAAA,EAElB,CAACA,QAAQ,GAARA,aAAAA,GAAD,KAAA,IAFJ,KAAsB,CAAtB;;AAIA,UAAIC,aAAa,CAAbA,CAAa,CAAbA,GAAAA,KAAAA,IAA4BA,aAAa,CAAbA,CAAa,CAAbA,GAAmBA,aAAa,CAAhE,CAAgE,CAAhE,EAAqE;AACjEA,QAAAA,aAAa,CAAbA,CAAa,CAAbA,GAAmBR,KAAK,GAAxBQ,CAAAA;AACAC,QAAAA,aAAa,CAAbA,CAAa,CAAbA,GAAAA,CAAAA;AAEJ;;AAAA,UAAIA,aAAa,CAAbA,CAAa,CAAbA,GAAmBA,aAAa,CAApC,CAAoC,CAApC,EAAyC;AACrCD,QAAAA,aAAa,CAAbA,CAAa,CAAbA,GAAmBR,KAAK,GAAxBQ,CAAAA;AACAC,QAAAA,aAAa,CAAbA,CAAa,CAAbA,GAAAA,CAAAA;AAEJ;;AAAA,aAAO;AAAED,QAAAA,aAAa,EAAf,aAAA;AAAiBC,QAAAA,aAAa,EAArC;AAAO,OAAP;AArBW,KAAA;;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA;AAAA,MAAA,UAAA,EApBKZ,UAoBL;AAAA,MAAA,WAAA,EAnBUC,WAmBV;AAAA,MAAA,QAAA,EAnB8BC,QAmB9B;AAAA,MAAA,KAAA,EARIC;AAQJ,KAAA;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA,qrBAAA;AAAA,IAAA,EAAA,CAAA,aAAA,GAAA,cAAA;AAAA,IAAA,EAAA,CAAA,UAAA,GAAA,iGAAA;;AAAA,IAAA,MAAA,CAAA,uBAAA,CAAA,EAAA;;AAAA,WAAA,EAAA;AAAA,GAAA,EAAA,EAsBZ,CAAA,KAAA,EAAA,UAAA,EAtBH,WAsBG,CAtBY,CAAf;AAwBA,SAAA,MAAA;AACH","sourcesContent":["import type Animated from 'react-native-reanimated';\nimport { useDerivedValue } from 'react-native-reanimated';\n\nexport type IVisibleRanges = Animated.SharedValue<{\n    negativeRange: number[];\n    positiveRange: number[];\n}>;\n\nexport function useVisibleRanges(options: {\n    total: number;\n    viewSize: number;\n    windowSize?: number;\n    translation: Animated.SharedValue<number>;\n}): IVisibleRanges {\n    const {\n        total = 0,\n        viewSize,\n        translation,\n        windowSize: _windowSize = 0,\n    } = options;\n\n    const windowSize = total <= _windowSize ? total : _windowSize;\n\n    const ranges = useDerivedValue(() => {\n        const positiveCount = Math.round(windowSize / 2);\n        const negativeCount = windowSize - positiveCount;\n        let curIndex = Math.round(-translation.value / viewSize);\n        curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n        const negativeRange = [\n            (curIndex - negativeCount + total) % total,\n            (curIndex - 1 + total) % total,\n        ];\n        const positiveRange = [\n            (curIndex + total) % total,\n            (curIndex + positiveCount + total) % total,\n        ];\n        if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        if (positiveRange[0] > positiveRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        return { negativeRange, positiveRange };\n    }, [total, windowSize, translation]);\n\n    return ranges;\n}\n"]},"metadata":{},"sourceType":"script"}