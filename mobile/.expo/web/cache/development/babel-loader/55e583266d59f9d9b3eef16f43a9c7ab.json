{"ast":null,"code":"import create from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nimport environment from \"../constants/environment\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar store = function store(set, get) {\n  return {\n    user: {\n      id: \"\"\n    },\n    colorMode: \"light\",\n    bottomBarSelectedIndex: 0,\n    onBoardingPassed: false,\n    configs: {\n      categories: []\n    },\n    notifications: [],\n    socketConnId: \"\",\n    socket: undefined,\n    setBottomBarSelectedIndex: function setBottomBarSelectedIndex(value) {\n      return set(function (state) {\n        return {\n          bottomBarSelectedIndex: value\n        };\n      });\n    },\n    setConfigs: function setConfigs(value) {\n      return set(function (state) {\n        return {\n          configs: value\n        };\n      });\n    },\n    setColorMode: function setColorMode(value) {\n      return set(function () {\n        return {\n          colorMode: value\n        };\n      });\n    },\n    setSocketConnId: function setSocketConnId(value) {\n      return set(function () {\n        return {\n          socketConnId: value\n        };\n      });\n    },\n    setSocket: function setSocket(value) {\n      return set(function () {\n        return {\n          socket: value\n        };\n      });\n    },\n    setUser: function setUser(value) {\n      return set(function () {\n        return {\n          user: value\n        };\n      });\n    },\n    setNotifications: function setNotifications(value) {\n      return set(function () {\n        return {\n          notifications: value\n        };\n      });\n    }\n  };\n};\n\nvar useStore = create(environment.environment != \"production\" && Platform.OS === 'web' ? devtools(store) : store);\nexport default useStore;","map":{"version":3,"sources":["/Users/macpro/Desktop/computer-science/projects/ai/holypics/mobile/context/store.ts"],"names":["create","devtools","environment","store","set","get","user","id","colorMode","bottomBarSelectedIndex","onBoardingPassed","configs","categories","notifications","socketConnId","socket","undefined","setBottomBarSelectedIndex","value","state","setConfigs","setColorMode","setSocketConnId","setSocket","setUser","setNotifications","useStore","Platform","OS"],"mappings":"AACA,OAAOA,MAAP,MAAmB,SAAnB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAOC,WAAP;;;AAEA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD,EAAgBC,GAAhB;AAAA,SAA0C;AAClDC,IAAAA,IAAI,EAAE;AAACC,MAAAA,EAAE,EAAE;AAAL,KAD4C;AAElDC,IAAAA,SAAS,EAAE,OAFuC;AAGlDC,IAAAA,sBAAsB,EAAE,CAH0B;AAIlDC,IAAAA,gBAAgB,EAAE,KAJgC;AAKlDC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KALyC;AAMlDC,IAAAA,aAAa,EAAE,EANmC;AAOlDC,IAAAA,YAAY,EAAE,EAPoC;AAQlDC,IAAAA,MAAM,EAAEC,SAR0C;AASlDC,IAAAA,yBAAyB,EAAE,mCAACC,KAAD;AAAA,aAAkBd,GAAG,CAAC,UAACe,KAAD;AAAA,eAAmB;AAACV,UAAAA,sBAAsB,EAAES;AAAzB,SAAnB;AAAA,OAAD,CAArB;AAAA,KATuB;AAUlDE,IAAAA,UAAU,EAAE,oBAACF,KAAD;AAAA,aAA+Bd,GAAG,CAAC,UAACe,KAAD;AAAA,eAAmB;AAACR,UAAAA,OAAO,EAAEO;AAAV,SAAnB;AAAA,OAAD,CAAlC;AAAA,KAVsC;AAWlDG,IAAAA,YAAY,EAAE,sBAACH,KAAD,EAA2B;AAAE,aAAOd,GAAG,CAAE;AAAA,eAAO;AAACI,UAAAA,SAAS,EAAEU;AAAZ,SAAP;AAAA,OAAF,CAAV;AAAyC,KAXlC;AAYlDI,IAAAA,eAAe,EAAE,yBAACJ,KAAD,EAAiB;AAAE,aAAOd,GAAG,CAAE;AAAA,eAAO;AAACU,UAAAA,YAAY,EAAEI;AAAf,SAAP;AAAA,OAAF,CAAV;AAA4C,KAZ9B;AAalDK,IAAAA,SAAS,EAAE,mBAACL,KAAD,EAAoB;AAAE,aAAOd,GAAG,CAAE;AAAA,eAAO;AAACW,UAAAA,MAAM,EAAEG;AAAT,SAAP;AAAA,OAAF,CAAV;AAAsC,KAbrB;AAclDM,IAAAA,OAAO,EAAE,iBAACN,KAAD,EAA8B;AAAE,aAAOd,GAAG,CAAE;AAAA,eAAO;AAACE,UAAAA,IAAI,EAAEY;AAAP,SAAP;AAAA,OAAF,CAAV;AAAqC,KAd5B;AAelDO,IAAAA,gBAAgB,EAAE,0BAACP,KAAD,EAA8B;AAAE,aAAOd,GAAG,CAAE;AAAA,eAAO;AAACS,UAAAA,aAAa,EAAEK;AAAhB,SAAP;AAAA,OAAF,CAAV;AAA6C;AAf7C,GAA1C;AAAA,CAAZ;;AAmBA,IAAMQ,QAAQ,GAAG1B,MAAM,CAAQE,WAAW,CAACA,WAAZ,IAA2B,YAA3B,IAA2CyB,QAAQ,CAACC,EAAT,KAAgB,KAA3D,GAAmE3B,QAAQ,CAACE,KAAD,CAA3E,GAAqFA,KAA7F,CAAvB;AAEA,eAAeuB,QAAf","sourcesContent":["import { Category } from './../@types/category';\nimport create from \"zustand\";\nimport { devtools } from \"zustand/middleware\"\nimport { Store } from '../@types/store';\nimport environment from '../constants/environment';\nimport { Platform } from \"react-native\"\nlet store = (set: Function, get: Function): Store => ({\n    user: {id: \"\"},\n    colorMode: \"light\",\n    bottomBarSelectedIndex: 0,\n    onBoardingPassed: false,\n    configs: { categories: [] as Category[] },\n    notifications: [],\n    socketConnId: \"\",\n    socket: undefined,\n    setBottomBarSelectedIndex: (value: number)=> set((state: Store) => ({bottomBarSelectedIndex: value})),\n    setConfigs: (value: Record<string, any>)=> set((state: Store) => ({configs: value})),\n    setColorMode: (value: \"light\" | \"dark\")=>{ return set( () => ({colorMode: value})) },\n    setSocketConnId: (value: string)=>{ return set( () => ({socketConnId: value})) },\n    setSocket: (value: WebSocket)=>{ return set( () => ({socket: value})) },\n    setUser: (value: Record<string, any>)=>{ return set( () => ({user: value})); },\n    setNotifications: (value: Array<Notification>)=>{ return set( () => ({notifications: value})) },\n})\n//I can also use persist to make data persistent\n\nconst useStore = create<Store>(environment.environment != \"production\" && Platform.OS === 'web' ? devtools(store) : store);\n\nexport default useStore; "]},"metadata":{},"sourceType":"module"}