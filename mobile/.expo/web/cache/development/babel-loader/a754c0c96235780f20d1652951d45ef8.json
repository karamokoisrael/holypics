{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCarouselController = useCarouselController;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _constants = require(\"../constants\");\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar _dealWithAnimation = require(\"../utils/dealWithAnimation\");\n\nfunction useCarouselController(options) {\n  var size = options.size,\n      loop = options.loop,\n      handlerOffsetX = options.handlerOffsetX,\n      withAnimation = options.withAnimation,\n      _options$disable = options.disable,\n      disable = _options$disable === void 0 ? false : _options$disable,\n      originalLength = options.originalLength,\n      length = options.length,\n      onChange = options.onChange,\n      duration = options.duration,\n      _options$defaultIndex = options.defaultIndex,\n      defaultIndex = _options$defaultIndex === void 0 ? 0 : _options$defaultIndex;\n  var index = (0, _reactNativeReanimated.useSharedValue)(defaultIndex);\n\n  var sharedIndex = _react.default.useRef(defaultIndex);\n\n  var sharedPreIndex = _react.default.useRef(defaultIndex);\n\n  var currentFixedPage = _react.default.useCallback(function () {\n    if (loop) {\n      return -Math.round(handlerOffsetX.value / size);\n    }\n\n    var fixed = handlerOffsetX.value / size % length;\n    return Math.round(handlerOffsetX.value <= 0 ? Math.abs(fixed) : Math.abs(fixed > 0 ? length - fixed : 0));\n  }, [handlerOffsetX, length, size, loop]);\n\n  var convertToSharedIndex = _react.default.useCallback(function (i) {\n    if (loop) {\n      switch (originalLength) {\n        case 1:\n          return 0;\n\n        case 2:\n          return i % 2;\n      }\n    }\n\n    return i;\n  }, [originalLength, loop]);\n\n  var computedIndex = _react.default.useCallback(function () {\n    sharedPreIndex.current = sharedIndex.current;\n    var toInt = handlerOffsetX.value / size % length;\n    var i = handlerOffsetX.value <= 0 ? Math.abs(toInt) : Math.abs(toInt > 0 ? length - toInt : 0);\n    index.value = i;\n\n    var _sharedIndex = convertToSharedIndex(i);\n\n    sharedIndex.current = _sharedIndex;\n    onChange(_sharedIndex);\n  }, [length, handlerOffsetX, sharedPreIndex, index, size, sharedIndex, convertToSharedIndex, onChange]);\n\n  var getCurrentIndex = _react.default.useCallback(function () {\n    return index.value;\n  }, [index]);\n\n  var canSliding = _react.default.useCallback(function () {\n    return !disable;\n  }, [disable]);\n\n  var onScrollEnd = _react.default.useCallback(function () {\n    options.onScrollEnd == null ? void 0 : options.onScrollEnd();\n  }, [options]);\n\n  var onScrollBegin = _react.default.useCallback(function () {\n    options.onScrollBegin == null ? void 0 : options.onScrollBegin();\n  }, [options]);\n\n  var scrollWithTiming = _react.default.useCallback(function () {\n    var _f = function _f(toValue, onFinished) {\n      var callback = function () {\n        var _f = function _f(isFinished) {\n          if (isFinished) {\n            (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();\n            onFinished && (0, _reactNativeReanimated.runOnJS)(onFinished)();\n          }\n        };\n\n        _f._closure = {\n          runOnJS: _reactNativeReanimated.runOnJS,\n          onScrollEnd: onScrollEnd,\n          onFinished: onFinished\n        };\n        _f.asString = \"function _f(isFinished){const{runOnJS,onScrollEnd,onFinished}=jsThis._closure;{if(isFinished){runOnJS(onScrollEnd)();onFinished&&runOnJS(onFinished)();}}}\";\n        _f.__workletHash = 7767198641261;\n        _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/hooks/useCarouselController.tsx (129:29)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var defaultWithAnimation = {\n        type: 'timing',\n        config: {\n          duration: duration,\n          easing: _constants.Easing.easeOutQuart\n        }\n      };\n      return (0, _dealWithAnimation.dealWithAnimation)(withAnimation != null ? withAnimation : defaultWithAnimation)(toValue, callback);\n    };\n\n    _f._closure = {\n      runOnJS: _reactNativeReanimated.runOnJS,\n      onScrollEnd: onScrollEnd,\n      duration: duration,\n      Easing: {\n        easeOutQuart: _constants.Easing.easeOutQuart\n      },\n      dealWithAnimation: _dealWithAnimation.dealWithAnimation,\n      withAnimation: withAnimation\n    };\n    _f.asString = \"function _f(toValue,onFinished){const{runOnJS,onScrollEnd,duration,Easing,dealWithAnimation,withAnimation}=jsThis._closure;{var _withAnimation;const callback=function(isFinished){'worklet';if(isFinished){runOnJS(onScrollEnd)();onFinished&&runOnJS(onFinished)();}};const defaultWithAnimation={type:'timing',config:{duration:duration,easing:Easing.easeOutQuart}};return dealWithAnimation((_withAnimation=withAnimation)!==null&&_withAnimation!==void 0?_withAnimation:defaultWithAnimation)(toValue,callback);}}\";\n    _f.__workletHash = 15006680124176;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/hooks/useCarouselController.tsx (127:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [duration, withAnimation, onScrollEnd]);\n\n  var next = _react.default.useCallback(function () {\n    var _f = function _f() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$count = opts.count,\n          count = _opts$count === void 0 ? 1 : _opts$count,\n          _opts$animated = opts.animated,\n          animated = _opts$animated === void 0 ? true : _opts$animated,\n          onFinished = opts.onFinished;\n      if (!canSliding() || !loop && index.value >= length - 1) return;\n      onScrollBegin == null ? void 0 : onScrollBegin();\n      var nextPage = currentFixedPage() + count;\n      index.value = nextPage;\n\n      if (animated) {\n        handlerOffsetX.value = scrollWithTiming(-nextPage * size, onFinished);\n      } else {\n        handlerOffsetX.value = -nextPage * size;\n        onFinished == null ? void 0 : onFinished();\n      }\n    };\n\n    _f._closure = {\n      canSliding: canSliding,\n      loop: loop,\n      index: index,\n      length: length,\n      onScrollBegin: onScrollBegin,\n      currentFixedPage: currentFixedPage,\n      handlerOffsetX: handlerOffsetX,\n      scrollWithTiming: scrollWithTiming,\n      size: size\n    };\n    _f.asString = \"function _f(opts={}){const{canSliding,loop,index,length,onScrollBegin,currentFixedPage,handlerOffsetX,scrollWithTiming,size}=jsThis._closure;{var _onScrollBegin;const{count=1,animated=true,onFinished:onFinished}=opts;if(!canSliding()||!loop&&index.value>=length-1)return;(_onScrollBegin=onScrollBegin)===null||_onScrollBegin===void 0?void 0:_onScrollBegin();const nextPage=currentFixedPage()+count;index.value=nextPage;if(animated){handlerOffsetX.value=scrollWithTiming(-nextPage*size,onFinished);}else{handlerOffsetX.value=-nextPage*size;onFinished===null||onFinished===void 0?void 0:onFinished();}}}\";\n    _f.__workletHash = 260250463458;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/hooks/useCarouselController.tsx (151:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [canSliding, loop, index, length, onScrollBegin, handlerOffsetX, size, scrollWithTiming, currentFixedPage]);\n\n  var prev = _react.default.useCallback(function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _opts$count2 = opts.count,\n        count = _opts$count2 === void 0 ? 1 : _opts$count2,\n        _opts$animated2 = opts.animated,\n        animated = _opts$animated2 === void 0 ? true : _opts$animated2,\n        onFinished = opts.onFinished;\n    if (!canSliding() || !loop && index.value <= 0) return;\n    onScrollBegin == null ? void 0 : onScrollBegin();\n    var prevPage = currentFixedPage() - count;\n    index.value = prevPage;\n\n    if (animated) {\n      handlerOffsetX.value = scrollWithTiming(-prevPage * size, onFinished);\n    } else {\n      handlerOffsetX.value = -prevPage * size;\n      onFinished == null ? void 0 : onFinished();\n    }\n  }, [canSliding, loop, index, onScrollBegin, handlerOffsetX, size, scrollWithTiming, currentFixedPage]);\n\n  var to = _react.default.useCallback(function (idx) {\n    var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (idx === index.value) return;\n    if (!canSliding()) return;\n    onScrollBegin == null ? void 0 : onScrollBegin();\n    var offset = handlerOffsetX.value + (index.value - idx) * size;\n\n    if (animated) {\n      index.value = idx;\n      handlerOffsetX.value = scrollWithTiming(offset);\n    } else {\n      handlerOffsetX.value = offset;\n      index.value = idx;\n      (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();\n    }\n  }, [index, canSliding, onScrollBegin, handlerOffsetX, size, scrollWithTiming, onScrollEnd]);\n\n  var scrollTo = _react.default.useCallback(function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var count = opts.count,\n        _opts$animated3 = opts.animated,\n        animated = _opts$animated3 === void 0 ? false : _opts$animated3,\n        onFinished = opts.onFinished;\n\n    if (!count) {\n      return;\n    }\n\n    var n = Math.round(count);\n\n    if (n < 0) {\n      prev({\n        count: Math.abs(n),\n        animated: animated,\n        onFinished: onFinished\n      });\n    } else {\n      next({\n        count: n,\n        animated: animated,\n        onFinished: onFinished\n      });\n    }\n  }, [prev, next]);\n\n  return {\n    next: next,\n    prev: prev,\n    to: to,\n    scrollTo: scrollTo,\n    index: index,\n    length: length,\n    sharedIndex: sharedIndex,\n    sharedPreIndex: sharedPreIndex,\n    computedIndex: computedIndex,\n    getCurrentIndex: getCurrentIndex\n  };\n}","map":{"version":3,"sources":["useCarouselController.tsx"],"names":["onScrollEnd","runOnJS","onFinished","canSliding","loop","length","onScrollBegin","currentFixedPage","index","scrollWithTiming","duration","handlerOffsetX","Easing","easeOutQuart","size","dealWithAnimation","withAnimation","disable","originalLength","onChange","defaultIndex","options","sharedIndex","React","sharedPreIndex","Math","fixed","convertToSharedIndex","i","computedIndex","toInt","_sharedIndex","getCurrentIndex","callback","defaultWithAnimation","type","config","easing","next","opts","count","animated","nextPage","prev","prevPage","to","idx","offset","scrollTo","n"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type Animated from 'react-native-reanimated';\nimport { Easing } from '../constants';\nimport { runOnJS, useSharedValue } from 'react-native-reanimated';\nimport type {\n    TCarouselActionOptions,\n    TCarouselProps,\n    WithTimingAnimation,\n} from '../types';\nimport { dealWithAnimation } from '@/utils/dealWithAnimation';\n\ninterface IOpts {\n    loop: boolean;\n    size: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    withAnimation?: TCarouselProps['withAnimation'];\n    disable?: boolean;\n    duration?: number;\n    originalLength: number;\n    length: number;\n    defaultIndex?: number;\n    onScrollBegin?: () => void;\n    onScrollEnd?: () => void;\n    // the length before fill data\n    onChange: (index: number) => void;\n}\n\nexport interface ICarouselController {\n    length: number;\n    index: Animated.SharedValue<number>;\n    sharedIndex: React.MutableRefObject<number>;\n    sharedPreIndex: React.MutableRefObject<number>;\n    prev: (opts?: TCarouselActionOptions) => void;\n    next: (opts?: TCarouselActionOptions) => void;\n    computedIndex: () => void;\n    getCurrentIndex: () => number;\n    to: (index: number, animated?: boolean) => void;\n    scrollTo: (opts?: TCarouselActionOptions) => void;\n}\n\nexport function useCarouselController(options: IOpts): ICarouselController {\n    const {\n        size,\n        loop,\n        handlerOffsetX,\n        withAnimation,\n        disable = false,\n        originalLength,\n        length,\n        onChange,\n        duration,\n        defaultIndex = 0,\n    } = options;\n\n    const index = useSharedValue<number>(defaultIndex);\n    // The Index displayed to the user\n    const sharedIndex = React.useRef<number>(defaultIndex);\n    const sharedPreIndex = React.useRef<number>(defaultIndex);\n\n    const currentFixedPage = React.useCallback(() => {\n        if (loop) {\n            return -Math.round(handlerOffsetX.value / size);\n        }\n\n        const fixed = (handlerOffsetX.value / size) % length;\n        return Math.round(\n            handlerOffsetX.value <= 0\n                ? Math.abs(fixed)\n                : Math.abs(fixed > 0 ? length - fixed : 0)\n        );\n    }, [handlerOffsetX, length, size, loop]);\n\n    const convertToSharedIndex = React.useCallback(\n        (i: number) => {\n            if (loop) {\n                switch (originalLength) {\n                    case 1:\n                        return 0;\n                    case 2:\n                        return i % 2;\n                }\n            }\n            return i;\n        },\n        [originalLength, loop]\n    );\n\n    const computedIndex = React.useCallback(() => {\n        sharedPreIndex.current = sharedIndex.current;\n        const toInt = (handlerOffsetX.value / size) % length;\n        const i =\n            handlerOffsetX.value <= 0\n                ? Math.abs(toInt)\n                : Math.abs(toInt > 0 ? length - toInt : 0);\n        index.value = i;\n        const _sharedIndex = convertToSharedIndex(i);\n        sharedIndex.current = _sharedIndex;\n        onChange(_sharedIndex);\n    }, [\n        length,\n        handlerOffsetX,\n        sharedPreIndex,\n        index,\n        size,\n        sharedIndex,\n        convertToSharedIndex,\n        onChange,\n    ]);\n\n    const getCurrentIndex = React.useCallback(() => {\n        return index.value;\n    }, [index]);\n\n    const canSliding = React.useCallback(() => {\n        return !disable;\n    }, [disable]);\n\n    const onScrollEnd = React.useCallback(() => {\n        options.onScrollEnd?.();\n    }, [options]);\n\n    const onScrollBegin = React.useCallback(() => {\n        options.onScrollBegin?.();\n    }, [options]);\n\n    const scrollWithTiming = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            const callback = (isFinished: boolean) => {\n                'worklet';\n                if (isFinished) {\n                    runOnJS(onScrollEnd)();\n                    onFinished && runOnJS(onFinished)();\n                }\n            };\n\n            const defaultWithAnimation: WithTimingAnimation = {\n                type: 'timing',\n                config: { duration, easing: Easing.easeOutQuart },\n            };\n\n            return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n                toValue,\n                callback\n            );\n        },\n        [duration, withAnimation, onScrollEnd]\n    );\n\n    const next = React.useCallback(\n        (opts: TCarouselActionOptions = {}) => {\n            'worklet';\n            const { count = 1, animated = true, onFinished } = opts;\n            if (!canSliding() || (!loop && index.value >= length - 1)) return;\n\n            onScrollBegin?.();\n\n            const nextPage = currentFixedPage() + count;\n            index.value = nextPage;\n\n            if (animated) {\n                handlerOffsetX.value = scrollWithTiming(\n                    -nextPage * size,\n                    onFinished\n                ) as any;\n            } else {\n                handlerOffsetX.value = -nextPage * size;\n                onFinished?.();\n            }\n        },\n        [\n            canSliding,\n            loop,\n            index,\n            length,\n            onScrollBegin,\n            handlerOffsetX,\n            size,\n            scrollWithTiming,\n            currentFixedPage,\n        ]\n    );\n\n    const prev = React.useCallback(\n        (opts: TCarouselActionOptions = {}) => {\n            const { count = 1, animated = true, onFinished } = opts;\n            if (!canSliding() || (!loop && index.value <= 0)) return;\n\n            onScrollBegin?.();\n\n            const prevPage = currentFixedPage() - count;\n            index.value = prevPage;\n\n            if (animated) {\n                handlerOffsetX.value = scrollWithTiming(\n                    -prevPage * size,\n                    onFinished\n                );\n            } else {\n                handlerOffsetX.value = -prevPage * size;\n                onFinished?.();\n            }\n        },\n        [\n            canSliding,\n            loop,\n            index,\n            onScrollBegin,\n            handlerOffsetX,\n            size,\n            scrollWithTiming,\n            currentFixedPage,\n        ]\n    );\n\n    const to = React.useCallback(\n        (idx: number, animated: boolean = false) => {\n            if (idx === index.value) return;\n            if (!canSliding()) return;\n\n            onScrollBegin?.();\n\n            const offset = handlerOffsetX.value + (index.value - idx) * size;\n\n            if (animated) {\n                index.value = idx;\n                handlerOffsetX.value = scrollWithTiming(offset);\n            } else {\n                handlerOffsetX.value = offset;\n                index.value = idx;\n                runOnJS(onScrollEnd)();\n            }\n        },\n        [\n            index,\n            canSliding,\n            onScrollBegin,\n            handlerOffsetX,\n            size,\n            scrollWithTiming,\n            onScrollEnd,\n        ]\n    );\n\n    const scrollTo = React.useCallback(\n        (opts: TCarouselActionOptions = {}) => {\n            const { count, animated = false, onFinished } = opts;\n            if (!count) {\n                return;\n            }\n            const n = Math.round(count);\n            if (n < 0) {\n                prev({ count: Math.abs(n), animated, onFinished });\n            } else {\n                next({ count: n, animated, onFinished });\n            }\n        },\n        [prev, next]\n    );\n\n    return {\n        next,\n        prev,\n        to,\n        scrollTo,\n        index,\n        length,\n        sharedIndex,\n        sharedPreIndex,\n        computedIndex,\n        getCurrentIndex,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}