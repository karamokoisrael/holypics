{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOffsetX = void 0;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar useOffsetX = function useOffsetX(opts, visibleRanges) {\n  var handlerOffsetX = opts.handlerOffsetX,\n      index = opts.index,\n      size = opts.size,\n      loop = opts.loop,\n      data = opts.data,\n      _opts$type = opts.type,\n      type = _opts$type === void 0 ? 'positive' : _opts$type,\n      _opts$viewCount = opts.viewCount,\n      viewCount = _opts$viewCount === void 0 ? Math.round((data.length - 1) / 2) : _opts$viewCount;\n  var ITEM_LENGTH = data.length;\n  var VALID_LENGTH = ITEM_LENGTH - 1;\n  var TOTAL_WIDTH = size * ITEM_LENGTH;\n  var HALF_WIDTH = 0.5 * size;\n  var positiveCount = type === 'positive' ? viewCount : VALID_LENGTH - viewCount;\n  var startPos = size * index;\n\n  if (index > positiveCount) {\n    startPos = (index - ITEM_LENGTH) * size;\n  }\n\n  var MAX = positiveCount * size;\n  var MIN = -((VALID_LENGTH - positiveCount) * size);\n  var x = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var _visibleRanges$value = visibleRanges.value,\n          negativeRange = _visibleRanges$value.negativeRange,\n          positiveRange = _visibleRanges$value.positiveRange;\n\n      if ((index < negativeRange[0] || index > negativeRange[1]) && (index < positiveRange[0] || index > positiveRange[1])) {\n        return Number.MAX_SAFE_INTEGER;\n      }\n\n      if (loop) {\n        var inputRange = [-TOTAL_WIDTH, MIN - HALF_WIDTH - startPos - Number.MIN_VALUE, MIN - HALF_WIDTH - startPos, 0, MAX + HALF_WIDTH - startPos, MAX + HALF_WIDTH - startPos + Number.MIN_VALUE, TOTAL_WIDTH];\n        var outputRange = [startPos, MAX + HALF_WIDTH - Number.MIN_VALUE, MIN - HALF_WIDTH, startPos, MAX + HALF_WIDTH, MIN - HALF_WIDTH + Number.MIN_VALUE, startPos];\n        return (0, _reactNativeReanimated.interpolate)(handlerOffsetX.value, inputRange, outputRange, _reactNativeReanimated.Extrapolate.CLAMP);\n      }\n\n      return handlerOffsetX.value + size * index;\n    };\n\n    _f._closure = {\n      visibleRanges: visibleRanges,\n      index: index,\n      loop: loop,\n      TOTAL_WIDTH: TOTAL_WIDTH,\n      MIN: MIN,\n      HALF_WIDTH: HALF_WIDTH,\n      startPos: startPos,\n      MAX: MAX,\n      interpolate: _reactNativeReanimated.interpolate,\n      handlerOffsetX: handlerOffsetX,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      },\n      size: size\n    };\n    _f.asString = \"function _f(){const{visibleRanges,index,loop,TOTAL_WIDTH,MIN,HALF_WIDTH,startPos,MAX,interpolate,handlerOffsetX,Extrapolate,size}=jsThis._closure;{const{negativeRange:negativeRange,positiveRange:positiveRange}=visibleRanges.value;if((index<negativeRange[0]||index>negativeRange[1])&&(index<positiveRange[0]||index>positiveRange[1])){return Number.MAX_SAFE_INTEGER;}if(loop){const inputRange=[-TOTAL_WIDTH,MIN-HALF_WIDTH-startPos-Number.MIN_VALUE,MIN-HALF_WIDTH-startPos,0,MAX+HALF_WIDTH-startPos,MAX+HALF_WIDTH-startPos+Number.MIN_VALUE,TOTAL_WIDTH];const outputRange=[startPos,MAX+HALF_WIDTH-Number.MIN_VALUE,MIN-HALF_WIDTH,startPos,MAX+HALF_WIDTH,MIN-HALF_WIDTH+Number.MIN_VALUE,startPos];return interpolate(handlerOffsetX.value,inputRange,outputRange,Extrapolate.CLAMP);}return handlerOffsetX.value+size*index;}}\";\n    _f.__workletHash = 12723241758918;\n    _f.__location = \"/Users/zhaodonghao/code/react-native-reanimated-carousel/src/hooks/useOffsetX.ts (45:30)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [loop, data, viewCount, type, size, visibleRanges]);\n  return x;\n};\n\nexports.useOffsetX = useOffsetX;","map":{"version":3,"sources":["useOffsetX.ts"],"names":["visibleRanges","loop","TOTAL_WIDTH","MAX","MIN","HALF_WIDTH","startPos","interpolate","Extrapolate","CLAMP","handlerOffsetX","useOffsetX","size","index","data","type","viewCount","Math","opts","ITEM_LENGTH","VALID_LENGTH","positiveCount","x","negativeRange","positiveRange","Number","inputRange","outputRange"],"mappings":"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","sourcesContent":["import Animated, {\n    Extrapolate,\n    interpolate,\n    useDerivedValue,\n} from 'react-native-reanimated';\nimport type { IVisibleRanges } from './useVisibleRanges';\n\nexport interface IOpts {\n    index: number;\n    size: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    data: unknown[];\n    type?: 'positive' | 'negative';\n    viewCount?: number;\n    loop?: boolean;\n}\n\nexport const useOffsetX = (opts: IOpts, visibleRanges: IVisibleRanges) => {\n    const {\n        handlerOffsetX,\n        index,\n        size,\n        loop,\n        data,\n        type = 'positive',\n        viewCount = Math.round((data.length - 1) / 2),\n    } = opts;\n\n    const ITEM_LENGTH = data.length;\n    const VALID_LENGTH = ITEM_LENGTH - 1;\n    const TOTAL_WIDTH = size * ITEM_LENGTH;\n    const HALF_WIDTH = 0.5 * size;\n\n    const positiveCount =\n        type === 'positive' ? viewCount : VALID_LENGTH - viewCount;\n\n    let startPos = size * index;\n    if (index > positiveCount) {\n        startPos = (index - ITEM_LENGTH) * size;\n    }\n\n    const MAX = positiveCount * size;\n    const MIN = -((VALID_LENGTH - positiveCount) * size);\n\n    const x = useDerivedValue(() => {\n        const { negativeRange, positiveRange } = visibleRanges.value;\n        if (\n            (index < negativeRange[0] || index > negativeRange[1]) &&\n            (index < positiveRange[0] || index > positiveRange[1])\n        ) {\n            return Number.MAX_SAFE_INTEGER;\n        }\n\n        if (loop) {\n            const inputRange = [\n                -TOTAL_WIDTH,\n                MIN - HALF_WIDTH - startPos - Number.MIN_VALUE,\n                MIN - HALF_WIDTH - startPos,\n                0,\n                MAX + HALF_WIDTH - startPos,\n                MAX + HALF_WIDTH - startPos + Number.MIN_VALUE,\n                TOTAL_WIDTH,\n            ];\n\n            const outputRange = [\n                startPos,\n                MAX + HALF_WIDTH - Number.MIN_VALUE,\n                MIN - HALF_WIDTH,\n                startPos,\n                MAX + HALF_WIDTH,\n                MIN - HALF_WIDTH + Number.MIN_VALUE,\n                startPos,\n            ];\n\n            return interpolate(\n                handlerOffsetX.value,\n                inputRange,\n                outputRange,\n                Extrapolate.CLAMP\n            );\n        }\n\n        return handlerOffsetX.value + size * index;\n    }, [loop, data, viewCount, type, size, visibleRanges]);\n\n    return x;\n};\n"]},"metadata":{},"sourceType":"script"}